{"version":3,"sources":["actions/index.js","actions/actionTypes.js","components/Portfolio.js","components/App.js","serviceWorker.js","reducers/index.js","reducers/statusReducer.js","store.js","index.js"],"names":["__webpack_require__","r","__webpack_exports__","d","updateStatus","_actionTypes__WEBPACK_IMPORTED_MODULE_0__","status","type","UPDATE_STATUS","payload","am4core","am4themes_animated","getPortfolioValue","prices","holdings","_","reduce","result","value","key","cash","getReturnsForPeriods","history","weeks","best","startDate","endDate","pct","worst","initial","slice","length","map","row","i","returnPct","date","final","last","weeklyReturn","Math","pow","annualReturn","Portfolio","props","_this","Object","_home_william_workspace_node_stock_returns_client_node_modules_registry_npmjs_org_babel_runtime_7_0_0_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","this","_home_william_workspace_node_stock_returns_client_node_modules_registry_npmjs_org_babel_runtime_7_0_0_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","_home_william_workspace_node_stock_returns_client_node_modules_registry_npmjs_org_babel_runtime_7_0_0_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","call","componentDidMount","_this$updateHistory","updateHistory","data","chart","am4charts","xAxes","push","renderer","grid","template","location","valueAxis","yAxes","tooltip","disabled","minWidth","series","dataFields","dateX","valueY","tooltipText","cursor","scrollbarX","updateChart","debounce","_this$updateHistory2","_this$state","state","showPct","initialValue","rebalancing","createHistory","pctChange","Date","rebalanceHoldings","stocks","currentValue","calculateHoldings","netWorth","_this$state2","bonds","SPY","floor","LQD","_home_william_workspace_node_stock_returns_client_node_modules_registry_npmjs_org_babel_runtime_7_0_0_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","_this$state3","stockData","counter","forEach","newValue","round","createTable","react__WEBPACK_IMPORTED_MODULE_7___default","a","createElement","className","concat","handleSubmit","e","preventDefault","document","activeElement","blur","handleInputChange","event","target","checked","name","setState","_home_william_workspace_node_stock_returns_client_node_modules_registry_npmjs_org_babel_runtime_7_0_0_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","handleAllocationChange","newPct","Number","otherPct","prevState","change","weeksPeriod","weeksInput","prevProps","JSON","stringify","dispose","_this2","_this$state4","_this$updateHistory3","isEmpty","records","onSubmit","min","max","onChange","onBlur","eval","hidden","id","style","width","height","Component","connect","actions","App","filter","react_default","Boolean","window","hostname","match","reducers","arguments","undefined","action","store","createStore","combineReducers","objectSpread","composeWithDevTools","applyMiddleware","reduxThunk","subscribe","console","log","getState","ReactDOM","render","es","src_components_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.39b117d7.chunk.js","sourcesContent":["import { UPDATE_STATUS } from './actionTypes';\n\nexport const updateStatus = (status) => {\n  return {\n    type: UPDATE_STATUS,\n    payload: status,\n  }\n}\n","export const UPDATE_STATUS = 'UPDATE_STATUS';\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\nimport * as actions from '../actions';\n// import 'react-vis/dist/style.css';\n// import { XYPlot, LineSeries, XAxis, YAxis } from 'react-vis';\nimport * as am4core from '@amcharts/amcharts4/core';\nimport * as am4charts from '@amcharts/amcharts4/charts';\nimport am4themes_animated from '@amcharts/amcharts4/themes/animated';\n\nam4core.useTheme(am4themes_animated);\n\nconst getPortfolioValue = (prices, holdings) => {\n  let cashValue = _.reduce(\n    holdings,\n    (result, value, key) => {\n      const nextValue = prices[key] * value || 0;\n      return result + nextValue;\n    },\n    0\n  );\n  return cashValue + holdings.cash;\n};\n\nconst getReturnsForPeriods = (history, weeks) => {\n  let best = {\n    startDate: '',\n    endDate: '',\n    pct: 0,\n  };\n  let worst = {\n    startDate: '',\n    endDate: '',\n    pct: 0,\n  };\n  const result = history.slice(0, history.length - weeks).map((row, i) => {\n    const returnPct = (history[i + weeks].value - row.value) / row.value;\n    if (returnPct > best.pct) {\n      best.startDate = row.date;\n      best.endDate = history[i + weeks].date;\n      best.pct = returnPct;\n    }\n    if (returnPct < worst.pct) {\n      worst.startDate = row.date;\n      worst.endDate = history[i + weeks].date;\n      worst.pct = returnPct;\n    }\n    return returnPct;\n  });\n\n  const initial = history[0].value;\n  const final = _.last(history).value;\n\n  const totalReturn = final / initial;\n\n  const weeklyReturn = Math.pow(final / initial, 1 / (history.length - 1));\n  const annualReturn = Math.pow(weeklyReturn, 52) - 1;\n\n  return {\n    best,\n    worst,\n    annualReturn,\n  };\n};\n\nclass Portfolio extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      stocks: 0.5,\n      bonds: 0.5,\n      cash: 0,\n      initialValue: 10000,\n      rebalancing: true,\n      showPct: false,\n      weeksPeriod: 26,\n      weeksInput: 26,\n    };\n  }\n\n  componentDidMount = () => {\n    const { history, data } = this.updateHistory();\n    let chart = am4core.create('chartdiv', am4charts.XYChart);\n\n    // let data = [];\n    // let visits = 10;\n    // for (let i = 1; i < 366; i++) {\n    //   visits += Math.round((Math.random() < 0.5 ? 1 : -1) * Math.random() * 10);\n    //   data.push({ date: new Date(2018, 0, i), name: \"name\" + i, value: visits });\n    // }\n\n    chart.data = data;\n\n    let dateAxis = chart.xAxes.push(new am4charts.DateAxis());\n    dateAxis.renderer.grid.template.location = 0;\n\n    let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\n    // valueAxis.logarithmic = true;\n    valueAxis.tooltip.disabled = true;\n    valueAxis.renderer.minWidth = 35;\n    // valueAxis.max = 50000;\n\n    let series = chart.series.push(new am4charts.LineSeries());\n    series.dataFields.dateX = 'date';\n    series.dataFields.valueY = 'value';\n\n    series.tooltipText = '${valueY.value}';\n    chart.cursor = new am4charts.XYCursor();\n\n    let scrollbarX = new am4charts.XYChartScrollbar();\n    scrollbarX.series.push(series);\n    // scrollbarX.events.on(\"dragstop\", (e) => {\n    //   console.log(e);\n    // })\n    chart.scrollbarX = scrollbarX;\n\n    // chart.addListener(\"zoomed\", (e) => {\n    //   const chart = e.chart,\n    //       data = chart.dataProvider,\n    //       zoomedData = data.slice(e.startIndex, e.endIndex + 1);\n    //       console.log(zoomedData);\n    // });\n\n\n    this.chart = chart;\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    if (JSON.stringify(this.state) !== JSON.stringify(prevState)) {\n      this.updateChart();\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.chart) {\n      this.chart.dispose();\n    }\n  }\n\n  updateChart = _.debounce(() => {\n    const { history, data } = this.updateHistory();\n    this.chart.data = data;\n  }, 400);\n\n  updateHistory = () => {\n    const { showPct, initialValue, rebalancing } = this.state;\n    const history = this.createHistory();\n    const data = history.map((row, i) => {\n      const value = showPct ? row.pctChange : row.value;\n      return {\n        date: new Date(row.date),\n        value,\n      };\n    });\n    return {\n      history,\n      data,\n    };\n    // this.setState({\n    //   history,\n    //   data,\n    // });\n  };\n\n  rebalanceHoldings = (prices, holdings) => {\n    const { stocks } = this.state;\n    const currentValue = getPortfolioValue(prices, holdings);\n    const newHoldings = this.calculateHoldings(currentValue, prices);\n    return newHoldings;\n  };\n\n  calculateHoldings = (netWorth, prices) => {\n    const { stocks, bonds } = this.state;\n    const holdings = {};\n    holdings.SPY = Math.floor((stocks * netWorth) / prices.SPY);\n    holdings.LQD = Math.floor((bonds * netWorth) / prices.LQD);\n    let totalValue = holdings.LQD * prices.LQD + holdings.SPY * prices.SPY;\n    const cash = netWorth - totalValue;\n    return {\n      ...holdings,\n      cash,\n    };\n  };\n\n  createHistory = () => {\n    const { initialValue, stocks: pctStocks, rebalancing } = this.state;\n    const { stockData } = this.props;\n    let counter = 1;\n    const history = [];\n    const initial = stockData[0];\n    let holdings = this.calculateHoldings(initialValue, initial);\n    history.push({\n      date: initial.date,\n      value: getPortfolioValue(initial, holdings),\n      pctChange: 1,\n    });\n    stockData.slice(1).forEach(prices => {\n      const newValue = getPortfolioValue(prices, holdings);\n      const pctChange = newValue / initialValue;\n      if (rebalancing && counter % 2 === 0) {\n        holdings = this.rebalanceHoldings(prices, holdings);\n        // console.log(holdings.SPY);\n      }\n      history.push({\n        date: prices.date,\n        value: _.round(newValue, 2),\n        pctChange,\n      });\n      counter++;\n    });\n    return history;\n  };\n\n  createTable = () => {\n    const history = this.createHistory();\n    return (\n      <table className=\"striped\">\n        <thead>\n          <tr>\n            <th>Date</th>\n            <th>Value</th>\n          </tr>\n        </thead>\n        <tbody>\n          {history.map(row => {\n            return (\n              <tr key={row.date}>\n                <td>{row.date}</td>\n                <td>{`$${row.value}`}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    );\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    if (document && document.activeElement) document.activeElement.blur();\n  };\n\n  handleInputChange = event => {\n    const target = event.target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleAllocationChange = e => {\n    const name = e.target.name;\n    const newPct = Number(e.target.value) / 10;\n    let otherPct = _.round(1 - newPct, 1);\n    this.setState(prevState => {\n      let change;\n      const { bonds, stocks, cash } = prevState;\n      switch (name) {\n        case 'stocks':\n          change = newPct - stocks;\n          if (change <= bonds) {\n            otherPct = _.round(bonds - change, 1);\n          } else {\n            otherPct = 0;\n          }\n          return {\n            stocks: newPct,\n            bonds: otherPct,\n            cash: _.round(1 - (newPct + otherPct), 1),\n          };\n        case 'bonds':\n          change = newPct - bonds;\n          if (change <= cash) {\n            otherPct = cash - change;\n          } else {\n            otherPct = 0;\n          }\n          return {\n            stocks: _.round(1 - (newPct + otherPct), 1),\n            bonds: newPct,\n            cash: _.round(otherPct, 1),\n          };\n        case 'cash':\n          change = newPct - cash;\n          if (change <= stocks) {\n            otherPct = _.round(stocks - change, 1);\n          } else {\n            otherPct = 0;\n          }\n          return {\n            stocks: otherPct,\n            bonds: _.round(1 - (newPct + otherPct), 1),\n            cash: newPct,\n          };\n        default:\n          return {\n            stocks,\n            bonds,\n            cash,\n          };\n      }\n    });\n  };\n\n  render() {\n    const {\n      stocks,\n      bonds,\n      cash,\n      showPct,\n      weeksPeriod,\n    } = this.state;\n\n    const { history, data } = this.updateHistory();\n\n    if (_.isEmpty(history)) {\n      return null;\n    }\n    const records = getReturnsForPeriods(history, weeksPeriod);\n    const final = _.last(history);\n    return (\n      <div className=\"container\">\n        <form onSubmit={this.handleSubmit}>\n          <div className=\"row\">\n            <div className=\"col s6\">\n              <label>\n                Stocks {`${stocks * 100}%`}\n                <input\n                  name=\"stocks\"\n                  type=\"range\"\n                  min=\"0\"\n                  max=\"10\"\n                  value={10 * stocks}\n                  onChange={this.handleAllocationChange}\n                />\n              </label>\n              <label>\n                Bonds {`${bonds * 100}%`}\n                <input\n                  name=\"bonds\"\n                  type=\"range\"\n                  min=\"0\"\n                  max=\"10\"\n                  value={10 * bonds}\n                  onChange={this.handleAllocationChange}\n                />\n              </label>\n              <label>\n                Cash {`${cash * 100}%`}\n                <input\n                  name=\"cash\"\n                  type=\"range\"\n                  min=\"0\"\n                  max=\"10\"\n                  value={10 * cash}\n                  onChange={this.handleAllocationChange}\n                />\n              </label>\n            </div>\n            <div className=\"col s6\">\n              <p>\n                <label>\n                  <input\n                    name=\"rebalancing\"\n                    type=\"checkbox\"\n                    checked={this.state.rebalancing ? 'checked' : ''}\n                    onChange={this.handleInputChange}\n                  />\n                  <span>Include Rebalancing</span>\n                </label>\n              </p>\n              {/* <p>\n                <label>\n                  <input\n                    name=\"showPct\"\n                    type=\"checkbox\"\n                    checked={showPct ? 'checked' : ''}\n                    onChange={this.handleInputChange}\n                  />\n                  <span>Show By Percent</span>\n                </label>\n              </p> */}\n\n              <div className=\"col s12\">\n                Evaluation Period (weeks):\n                <div className=\"input-field inline\">\n                  <input\n                    type=\"text\"\n                    className=\"center-align\"\n                    value={this.state.weeksInput}\n                    onChange={e => {\n                      this.setState({\n                        weeksInput: e.target.value,\n                      });\n                    }}\n                    onBlur={() => {\n                      const weeksPeriod =\n                        Number(eval(this.state.weeksInput)) || 26;\n                      this.setState({\n                        weeksPeriod,\n                      });\n                    }}\n                  />{' '}\n                </div>\n              </div>\n              <input type=\"submit\" hidden />\n            </div>\n          </div>\n        </form>\n        <pre>\n          Final Value: {`$${final.value}`} <br />\n          Average 52-week Return: {`${_.round(100 * records.annualReturn, 2)}%`}\n          <br />\n          {/* Date: {displayDate} <br />\n          Value: {displayValue} <br /> */}\n          Best {weeksPeriod}-week: {records.best.startDate} to{' '}\n          {records.best.endDate} ({`${_.round(100 * records.best.pct, 1)}%`})\n          <br />\n          Worst {weeksPeriod}-week: {records.worst.startDate} to{' '}\n          {records.worst.endDate} ({`${_.round(100 * records.worst.pct, 1)}%`})\n          <br />\n        </pre>\n        <div id=\"chartdiv\" style={{ width: '100%', height: '500px' }} />\n        {/* {false && (\n          <div className=\"row\">\n            <div className=\"col s8\">\n              <XYPlot\n                yDomain={showPct ? [0.8, 4.5] : [5000, 45000]}\n                xType=\"time\"\n                yType={showPct ? 'linear' : 'log'}\n                margin={{ left: 100, right: 100 }}\n                height={400}\n                width={1000}\n              >\n                <XAxis />\n                <YAxis />\n                <LineSeries\n                  data={data}\n                  onNearestX={(datapoint, event) => {\n                    this.setState({\n                      displayDate: datapoint.x.toDateString(),\n                      displayValue: datapoint.y,\n                    });\n                  }}\n                />\n              </XYPlot>\n            </div>\n          </div>\n        )} */}\n        {/* <button onClick={this.updateHistory}>Update</button> */}\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  state => ({\n    status: state.status,\n  }),\n  actions\n)(Portfolio);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport _ from 'lodash';\nimport * as actions from '../actions';\nimport Portfolio from './Portfolio';\nimport stockData from '../data/securities.json';\n\nclass App extends Component { \n  render() {\n    const data = _.filter(stockData, (row) => {\n      return true;\n      const d = new Date(row.date);\n      return (d.getFullYear() <= 2010);\n    })\n    return (\n      <div className=\"App\">\n        <Portfolio stockData={data} />\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  state => ({\n    status: state.status,\n  }),\n  actions\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import status from './statusReducer';\n\nconst reducers = {\n  status,\n};\n\nexport default reducers;\n","import { UPDATE_STATUS } from '../actions/actionTypes';\n\nexport default (state = 'OK', action) => {\n  switch (action.type) {\n    case UPDATE_STATUS:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n","import { createStore, applyMiddleware } from 'redux';\nimport reduxThunk from 'redux-thunk';\nimport { combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport reducers from './reducers';\n\nconst store = createStore(\n  combineReducers({ ...reducers }),\n  composeWithDevTools(applyMiddleware(reduxThunk)),\n);\n\nstore.subscribe(()=>{\n  console.log('new client state', store.getState());\n});\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}